#pragma warning disable RS1038
#pragma warning disable RS1041

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Linq;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Threading.Tasks;
using Dagger.GraphQL;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;

namespace Dagger.Sdk.SourceGenerator;

[Generator]
public class SchemaCodeGenerator : IIncrementalGenerator
{
    readonly string[] _splitChars = ["\r\n", "\r", "\n"];
    const string EmptyArray = "[]";
    const string EmptyString = "\"\"";

    // InterfaceDeclarationSyntax? _inputObjectInterface;
    // ClassDeclarationSyntax? _scalarClass;
    // TypeDeclarationSyntax? _scalarIdConverterClass;

    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var additionalFiles = context.AdditionalTextsProvider;
        var compilation = context.CompilationProvider;
        var combined = compilation.Combine(additionalFiles.Collect());
        context.RegisterSourceOutput(combined, (spc, combinedValues) => GenerateCode(spc, combinedValues.Left, combinedValues.Right));
    }

    void GenerateCode(SourceProductionContext context, Compilation compilation, ImmutableArray<AdditionalText> files)
    {
        // We only handle schema.json
        if (files.IsDefaultOrEmpty || files.Length != 1) return;
        if (Path.GetFileName(files[0].Path) != "schema.json") return;
        
        SourceText? schemaAsJson = files[0].GetText();
        SchemaFile schemaFile = JsonSerializer.Deserialize<SchemaFile>(schemaAsJson!.ToString())!;
                  
        var compilationUnitSyntax = CompilationUnit()
            .WithMembers(CreateDaggerTypes(schemaFile))
            .AddUsings(UsingDirective(IdentifierName(typeof(JsonConverter).Namespace!)), UsingDirective(IdentifierName(nameof(Dagger))))
            .WithLeadingTrivia(CreateLeadingTrivia());
        
        context.AddSource($"Dagger.g.cs", compilationUnitSyntax.NormalizeWhitespace().ToFullString());
    }

    SyntaxTriviaList CreateLeadingTrivia()
    {
        return TriviaList(
            Comment("// This file is generated by DaggerSDK.SourceGenerator"),
            Trivia(NullableDirectiveTrivia(Token(SyntaxKind.EnableKeyword), isActive: true))
        );
    }

    SyntaxList<MemberDeclarationSyntax> CreateDaggerTypes(SchemaFile schemaFile)
    {
        MemberDeclarationSyntax[] memberDeclarationSyntaxes = schemaFile
            !.Schema.Types
            .ExcludeInternalTypes()
            .Select(CreateMemberDeclarationSyntax)
            .Where(syntax => syntax is not null)
            .OfType<MemberDeclarationSyntax>()
            .ToArray();
        
        return List(memberDeclarationSyntaxes);
    }

    MemberDeclarationSyntax? CreateMemberDeclarationSyntax(GraphQL.Type type)
    {
        var syntax = type.Kind switch
        {
            Kind.OBJECT => CreateObjectAsClassDeclarationSyntax(type),
            Kind.SCALAR => CreateScalarAsClassDeclarationSyntax(type),
            Kind.INPUT_OBJECT => CreateInputAsStructDeclarationSyntax(type),
            Kind.ENUM => CreateEnumAsEnumDeclarationSyntax(type),
            _ => null,
        };
        
        return syntax;
    }
    
    AttributeSyntax CreateObsoleteAttribute(string? deprecationReason)
    {
        AttributeSyntax obsoleteAttribute = Attribute(IdentifierName(nameof(ObsoleteAttribute)));

        if (!string.IsNullOrWhiteSpace(deprecationReason))
        {
            AttributeArgumentSyntax reason = AttributeArgument(LiteralExpression(SyntaxKind.StringLiteralExpression, Literal(deprecationReason)));
            obsoleteAttribute = obsoleteAttribute.WithArgumentList(AttributeArgumentList(SingletonSeparatedList(reason)));
        }

        return obsoleteAttribute;
    }

    EnumMemberDeclarationSyntax CreateEnumMemberDeclarationSyntax(EnumValue field)
    {
        EnumMemberDeclarationSyntax enumMemberDeclarationSyntax = EnumMemberDeclaration(Identifier(field.Name));
        
        if (field.IsDeprecated)
        {
            enumMemberDeclarationSyntax = enumMemberDeclarationSyntax
                .WithAttributeLists(SingletonList(AttributeList(SingletonSeparatedList(CreateObsoleteAttribute(field.DeprecationReason)))));
        }

        return enumMemberDeclarationSyntax.WithLeadingTrivia(CreateEnumMemberDocumentation(field));
    }

    MemberDeclarationSyntax CreateEnumAsEnumDeclarationSyntax(GraphQL.Type type)
    {
        return EnumDeclaration(type.Name)
            .AddModifiers(Token(SyntaxKind.PublicKeyword))
            .WithMembers(SeparatedList(type.EnumValues.Select(CreateEnumMemberDeclarationSyntax)))
            .WithAttributeLists(SingletonList(AttributeList(SingletonSeparatedList(CreateJsonStringEnumConverterAttribute(type)))))
            .WithLeadingTrivia(CreateTypeDocumentation(type));
    }
    
    AttributeSyntax CreateJsonStringEnumConverterAttribute(GraphQL.Type type)
    {
        return Attribute(IdentifierName(nameof(JsonConverter)))
            .WithArgumentList(
                AttributeArgumentList(
                    SingletonSeparatedList(AttributeArgument(TypeOfExpression(GenericName(Identifier(nameof(JsonStringEnumConverter)))
                                .WithTypeArgumentList(TypeArgumentList(SingletonSeparatedList(ParseTypeName(type.Name))))
                            )
                        )
                    )
                )
            );
    }
    
    AttributeSyntax CreateScalarIdConverterAttribute(GraphQL.Type  type)
    {
        const string identifier = "ScalarIdConverter"; // _scalarIdConverterClass!.Identifier.Text
        
        return Attribute(IdentifierName(nameof(JsonConverter)))
            .WithArgumentList(
                AttributeArgumentList(
                    SingletonSeparatedList(AttributeArgument(TypeOfExpression(GenericName(Identifier(identifier))
                                .WithTypeArgumentList(TypeArgumentList(SingletonSeparatedList(ParseTypeName(type.Name))))
                            )
                        )
                    )
                )
            );
    }

    MemberDeclarationSyntax CreateInputAsStructDeclarationSyntax(GraphQL.Type  type)
    {
        var parameterList = type.InputFields.Select(CreateInputObjectParameterSyntax).ToArray();
        
        const string identifier = "IInputObject";

        return StructDeclaration(type.Name)
            .WithModifiers(TokenList(Token(SyntaxKind.PublicKeyword)))
            .WithParameterList(ParameterList().AddParameters(parameterList))
            .WithBaseList(BaseList(SingletonSeparatedList<BaseTypeSyntax>(SimpleBaseType(IdentifierName(identifier)))))
            .AddMembers(
                MethodDeclaration(GenericName(Identifier("Dictionary")).AddTypeArgumentListArguments(IdentifierName("string"), IdentifierName(nameof(IFormattedValue))), Identifier("ToDictionary"))
                    .WithModifiers(TokenList(Token(SyntaxKind.PublicKeyword)))
                    .WithExpressionBody(
                        ArrowExpressionClause(
                            InvocationExpression(
                                MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression, ThisExpression(), IdentifierName("AsDictionary"))
                            )
                        )
                    ).WithSemicolonToken(Token(SyntaxKind.SemicolonToken))
            )
            .AddMembers(CreateProperties(type.InputFields))
            .WithLeadingTrivia(CreateTypeDocumentation(type));
    }

    MemberDeclarationSyntax[] CreateProperties(InputValue[] typeInputFields)
    {
        return typeInputFields.Select(input => CreateProperty(input, withSetFromConstructor: true)).Cast<MemberDeclarationSyntax>().ToArray();
    }

    PropertyDeclarationSyntax CreateProperty(InputValue arg, bool withSetFromConstructor = false)
    {
        var type = arg.Type.GetUnderlyingType();
        
        var propertyType = type.IsNullable() ? NullableType(ParseTypeName(type.GetTypeName())) : ParseTypeName(type.GetTypeName());
        
        var property =  PropertyDeclaration(propertyType, arg.GetAsPropertyName())
            .WithModifiers(TokenList(Token(SyntaxKind.PublicKeyword)))
            .WithAccessorList(AccessorList(SingletonList(AccessorDeclaration(SyntaxKind.GetAccessorDeclaration).WithSemicolonToken(Token(SyntaxKind.SemicolonToken)))))
            .WithLeadingTrivia(CreateSummaryDocumentation(arg.Description));
        
        if (withSetFromConstructor)
        {
            property = property
                .WithInitializer(EqualsValueClause(IdentifierName(arg.GetAsParameterName()))).WithSemicolonToken(Token(SyntaxKind.SemicolonToken));
        }
        
        return property;
    }


    MemberDeclarationSyntax CreateObjectAsClassDeclarationSyntax(GraphQL.Type  type)
    {
        var classDeclarationSyntax = ClassDeclaration(type.Name)
            .AddModifiers(Token(SyntaxKind.PublicKeyword), Token(SyntaxKind.PartialKeyword))
            .WithMembers(List(type.Fields.Select(field => CreateFieldAsMethodDeclarationSyntax(type, field)).Cast<MemberDeclarationSyntax>()))
            .WithParameterList(ParameterList(SeparatedList<ParameterSyntax>([
                            Parameter(Identifier(nameof(QueryBuilder))).WithType(IdentifierName(nameof(QueryBuilder))),
                            Token(SyntaxKind.CommaToken),
                            Parameter(Identifier(nameof(GraphQLClient))).WithType(IdentifierName(nameof(GraphQLClient)))
                        ]
                    )
                )
            );
        
        GraphQL.Field? interfaceType = type.Fields.FirstOrDefault(f => f.Name == "id");

        if (interfaceType is not null)
        {
            classDeclarationSyntax = classDeclarationSyntax.AddBaseListTypes(SimpleBaseType(GenericName(Identifier("IId"))
                    .WithTypeArgumentList(TypeArgumentList(SingletonSeparatedList(ParseTypeName(interfaceType.Type.GetTypeName()))))
                )
            );
        }
        
        return classDeclarationSyntax.WithLeadingTrivia(CreateTypeDocumentation(type));
    }

    MethodDeclarationSyntax CreateFieldAsMethodDeclarationSyntax(GraphQL.Type  type, GraphQL.Field field)
    {
        var modifiers = TokenList(Token(SyntaxKind.PublicKeyword));
        var returnType = CreateReturnType(field);

        if (returnType is GenericNameSyntax { Identifier.Text: nameof(Task) })
        {
            modifiers = modifiers.Add(Token(SyntaxKind.AsyncKeyword));
        }

        var method = MethodDeclaration(returnType, type.GetMethodName(field))
            .WithModifiers(modifiers)
            .WithBody(CreateBlockSyntax(field))
            .WithParameterList(CreateInputValuesAsParameterListSyntax(field.Args))
            .WithLeadingTrivia(CreateFieldDocumentationAsTriviaComments(field));

        if (field.IsDeprecated)
        {
            var attributeSyntax = Attribute(IdentifierName(nameof(ObsoleteAttribute)));

            if (field.DeprecationReason is not null)
            {
                attributeSyntax = attributeSyntax.WithArgumentList(
                    AttributeArgumentList(
                        SingletonSeparatedList(
                            AttributeArgument(LiteralExpression(SyntaxKind.StringLiteralExpression, Literal(field.DeprecationReason)))
                        )
                    )
                );
            }

            method = method.WithAttributeLists(SingletonList(AttributeList(SingletonSeparatedList(attributeSyntax))));
        }

        return method;
    }

    TypeSyntax CreateReturnType(GraphQL.Field f)
    {
        if (f.Type.IsLeaf() || f.Type.IsList())
        {
            return GenericName(Identifier(nameof(Task))).WithTypeArgumentList(TypeArgumentList(SingletonSeparatedList(ParseTypeName(f.Type.GetTypeName()))));
        }

        return ParseTypeName(f.Type.GetTypeName());
    }

    MemberDeclarationSyntax CreateScalarAsClassDeclarationSyntax(GraphQL.Type type)
    {
        return ClassDeclaration(type.Name)
            .AddModifiers(Token(SyntaxKind.PublicKeyword))
            .WithBaseList(BaseList().AddTypes(SimpleBaseType(IdentifierName("Scalar"))))    
            .WithAttributeLists(SingletonList(AttributeList(SingletonSeparatedList(CreateScalarIdConverterAttribute(type)))))
            .WithLeadingTrivia(CreateTypeDocumentation(type));
    }
    
    SyntaxTriviaList CreateTypeDocumentation(GraphQL.Type  type)
    {
        return CreateSummaryDocumentation(type.Description);
    }

    SyntaxTriviaList CreateSummaryDocumentation(string description)
    {
        var lines = description.Split(_splitChars, StringSplitOptions.RemoveEmptyEntries);
        var comments = new List<SyntaxTrivia>
        {
            Comment("/// <summary>"),
        };

        foreach (var line in lines)
        {
            comments.Add(Comment($"/// {line.Trim()}"));
        }

        comments.Add(Comment("/// </summary>"));

        return TriviaList(comments);
    }

    SyntaxTriviaList CreateEnumMemberDocumentation(EnumValue field)
    {
        return CreateSummaryDocumentation(field.Description);
    }

    SyntaxTriviaList CreateFieldDocumentationAsTriviaComments(GraphQL.Field field)
    {
        var lines = field.Description.Split(_splitChars, StringSplitOptions.RemoveEmptyEntries);
        var comments = new List<SyntaxTrivia>();
        comments.Add(Comment("/// <summary>"));

        foreach (var line in lines)
        {
            comments.Add(Comment($"/// {line.Trim()}"));
        }

        comments.Add(Comment("/// </summary>"));

        foreach (var arg in field.Args)
        {
            var name = arg.Name;
            var argLines = arg.Description.Split(_splitChars, StringSplitOptions.RemoveEmptyEntries);
            comments.Add(Comment($"/// <param name=\"{name}\">"));

            foreach (var line in argLines)
            {
                comments.Add(Comment($"/// {line.Trim()}"));
            }

            comments.Add(Comment("/// </param>"));
        }

        return TriviaList(comments);
    }
    
    ParameterSyntax CreateInputObjectParameterSyntax(InputValue arg)
    {
        var type = arg.Type.GetUnderlyingType();

        ParameterSyntax parameterSyntax = Parameter(Identifier(arg.Name));

         if (type.IsNullable())
         {
             parameterSyntax = parameterSyntax.WithType(NullableType(ParseTypeName(type.GetTypeName())));
         }
         else
         {
                parameterSyntax = parameterSyntax.WithType(ParseTypeName(type.GetTypeName()));
         }

        if (type.IsList())
        {
            if (arg.DefaultValue == EmptyArray)
            {
                parameterSyntax = parameterSyntax.WithDefault(EqualsValueClause(LiteralExpression(SyntaxKind.NullLiteralExpression)));
            }
            else if (arg.DefaultValue is null)
            {
                parameterSyntax = parameterSyntax.WithDefault(EqualsValueClause(LiteralExpression(SyntaxKind.NullLiteralExpression)));
            }
            else
            {
                throw new NotImplementedException("List with default value not implemented");
            }
        }
        else if (type.IsBoolean())
        {
            if (arg.DefaultValue == "true")
            {
                parameterSyntax = parameterSyntax.WithDefault(EqualsValueClause(LiteralExpression(SyntaxKind.TrueLiteralExpression)));
            }
            else if (arg.DefaultValue == "false")
            {
                parameterSyntax = parameterSyntax.WithDefault(EqualsValueClause(LiteralExpression(SyntaxKind.FalseLiteralExpression)));
            }
            else if (arg.DefaultValue is null)
            {
                parameterSyntax = parameterSyntax.WithDefault(EqualsValueClause(LiteralExpression(SyntaxKind.NullLiteralExpression)));
            }
            else
            {
                throw new NotImplementedException("Boolean with default value not implemented");
            }
        }
        else if (type.IsInt())
        {
            if (arg.DefaultValue is null)
            {
                parameterSyntax = parameterSyntax.WithDefault(EqualsValueClause(LiteralExpression(SyntaxKind.NullLiteralExpression)));
            }
            else
            {
                parameterSyntax = parameterSyntax
                    .WithDefault(EqualsValueClause(LiteralExpression(SyntaxKind.NumericLiteralExpression, Literal(arg.DefaultValue, int.Parse(arg.GetDefaultValue())))));
            }
        }
        else if (type.IsFloat())
        {
            if (arg.DefaultValue is null)
            {
                parameterSyntax = parameterSyntax
                    .WithDefault(EqualsValueClause(LiteralExpression(SyntaxKind.NullLiteralExpression)));
            }
            else if (!string.IsNullOrWhiteSpace(arg.DefaultValue))
            {
                parameterSyntax = parameterSyntax
                    .WithDefault(EqualsValueClause(LiteralExpression(SyntaxKind.NumericLiteralExpression, Literal(arg.DefaultValue, float.Parse(arg.GetDefaultValue())))));
            }
        }
        else if (type.IsString())
        {
            if (arg.DefaultValue is null)
            {
                parameterSyntax = parameterSyntax
                    .WithDefault(EqualsValueClause(LiteralExpression(SyntaxKind.NullLiteralExpression)));
            }
            else if (arg.DefaultValue == EmptyString)
            {
                parameterSyntax = parameterSyntax
                    .WithDefault(EqualsValueClause(LiteralExpression(SyntaxKind.StringLiteralExpression, Literal(string.Empty))));
            }
            else if (!string.IsNullOrWhiteSpace(arg.DefaultValue))
            {
                parameterSyntax = parameterSyntax
                    .WithDefault(EqualsValueClause(LiteralExpression(SyntaxKind.StringLiteralExpression, Literal(arg.GetDefaultValue()))));
            }
            else
            {
                throw new NotImplementedException("String with default value not implemented");
            }
        }
        else if (type.IsEnum())
        {
            if (arg.DefaultValue == null)
            {
                parameterSyntax = parameterSyntax.WithDefault(EqualsValueClause(LiteralExpression(SyntaxKind.NullLiteralExpression)));
            }
            else if (arg.DefaultValue == EmptyString)
            {
                parameterSyntax = parameterSyntax.WithDefault(EqualsValueClause(LiteralExpression(SyntaxKind.NullLiteralExpression)));
            }
            else if (arg.DefaultValue is not null)
            {
                parameterSyntax = parameterSyntax.WithDefault(EqualsValueClause(MemberAccessExpression(
                            SyntaxKind.SimpleMemberAccessExpression,
                            IdentifierName(arg.Type.Name),
                            IdentifierName(arg.GetDefaultValue())
                        )
                    )
                );
            }
            else
            {
                throw new NotImplementedException("Enum with default value not implemented");
            }
        }
        else if (type.IsScalar())
        {
            if (arg.DefaultValue == null)
            {
                parameterSyntax = parameterSyntax.WithDefault(EqualsValueClause(LiteralExpression(SyntaxKind.NullLiteralExpression)));
            }
            else if (arg.DefaultValue == EmptyString)
            {
                parameterSyntax = parameterSyntax.WithDefault(EqualsValueClause(LiteralExpression(SyntaxKind.StringLiteralExpression, Literal(string.Empty))));
            }
        }
            
        return parameterSyntax;
    }
    
    ParameterSyntax CreateRequiredArgumentAsParameterSyntax(InputValue arg)
    {
        string typeName = arg.GetNormalizedTypeName();
        ParameterSyntax parameterSyntax = Parameter(Identifier(arg.GetAsParameterName())).WithType(ParseTypeName(typeName));

        if (arg.Type.IsList())
        {
            parameterSyntax = parameterSyntax
                .WithType(
                    ArrayType(ParseTypeName(typeName))
                        .WithRankSpecifiers(SingletonList(ArrayRankSpecifier(SingletonSeparatedList<ExpressionSyntax>(OmittedArraySizeExpression())))));
        }
        
        return parameterSyntax;
    }

    ParameterSyntax CreateNullableArgumentAsParameterSyntax(InputValue arg)
    {
        TypeRef type = arg.Type.GetUnderlyingType();

        ParameterSyntax parameterSyntax = Parameter(Identifier(arg.Name));
        
        string typeName = arg.GetNormalizedTypeName();
        
        if (type.IsList())
        {
            parameterSyntax = parameterSyntax
                .WithType(
                    NullableType(
                        ArrayType(IdentifierName(typeName))
                            .WithRankSpecifiers(SingletonList(ArrayRankSpecifier(SingletonSeparatedList<ExpressionSyntax>(OmittedArraySizeExpression()))))));
            
            parameterSyntax = parameterSyntax.WithDefault(EqualsValueClause(LiteralExpression(SyntaxKind.NullLiteralExpression)));
        }
        else
        {
            parameterSyntax = parameterSyntax.WithType(NullableType(ParseTypeName(typeName)));
        }
        
        if (type.IsBoolean())
        {
            if (arg.DefaultValue == "true")
            {
                parameterSyntax = parameterSyntax.WithDefault(EqualsValueClause(LiteralExpression(SyntaxKind.TrueLiteralExpression)));
            }
            else if (arg.DefaultValue == "false")
            {
                parameterSyntax = parameterSyntax.WithDefault(EqualsValueClause(LiteralExpression(SyntaxKind.FalseLiteralExpression)));
            }
            else if (string.IsNullOrWhiteSpace(arg.DefaultValue))
            {
                parameterSyntax = parameterSyntax.WithDefault(EqualsValueClause(LiteralExpression(SyntaxKind.NullLiteralExpression)));
            }
        }
        else if (type.IsInt())
        {
            if (string.IsNullOrWhiteSpace(arg.DefaultValue))
            {
                parameterSyntax = parameterSyntax.WithDefault(EqualsValueClause(LiteralExpression(SyntaxKind.NullLiteralExpression)));
            }
            else
            {
                parameterSyntax = parameterSyntax.WithDefault(EqualsValueClause(LiteralExpression(SyntaxKind.NumericLiteralExpression, Literal(arg.DefaultValue, int.Parse(arg.GetDefaultValue())))));
            }
        }
        else if (type.IsFloat())
        {
            if (string.IsNullOrWhiteSpace(arg.DefaultValue))
            {
                parameterSyntax = parameterSyntax.WithDefault(EqualsValueClause(LiteralExpression(SyntaxKind.NullLiteralExpression)));
            }
            else if (!string.IsNullOrWhiteSpace(arg.DefaultValue))
            {
                parameterSyntax = parameterSyntax.WithDefault(EqualsValueClause(LiteralExpression(SyntaxKind.NumericLiteralExpression, Literal(arg.DefaultValue, float.Parse(arg.GetDefaultValue())))));
            }
        }
        else if (type.IsString())
        {
            if (string.IsNullOrWhiteSpace(arg.DefaultValue))
            {
                parameterSyntax = parameterSyntax.WithDefault(EqualsValueClause(LiteralExpression(SyntaxKind.NullLiteralExpression)));
            }
            else if (arg.DefaultValue == EmptyString)
            {
                parameterSyntax = parameterSyntax.WithDefault(EqualsValueClause(LiteralExpression(SyntaxKind.StringLiteralExpression, Literal(string.Empty))));
            }
            else if (!string.IsNullOrWhiteSpace(arg.DefaultValue))
            {
                parameterSyntax = parameterSyntax.WithDefault(EqualsValueClause(LiteralExpression(SyntaxKind.StringLiteralExpression, Literal(arg.GetDefaultValue()))));
            }
        }
        else if (type.IsEnum())
        {
            if (string.IsNullOrWhiteSpace(arg.DefaultValue))
            {
                parameterSyntax = parameterSyntax.WithDefault(EqualsValueClause(LiteralExpression(SyntaxKind.NullLiteralExpression)));
            }
            else if (arg.DefaultValue == EmptyString)
            {
                parameterSyntax = parameterSyntax.WithDefault(EqualsValueClause(LiteralExpression(SyntaxKind.NullLiteralExpression)));
            }
            else if (!string.IsNullOrWhiteSpace(arg.DefaultValue))
            {
                MemberAccessExpressionSyntax enumValue = MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression, IdentifierName(arg.Type.Name), IdentifierName(arg.GetDefaultValue()));
                parameterSyntax = parameterSyntax.WithDefault(EqualsValueClause(enumValue));
            }
        }
        else if (type.IsScalar())
        {
            if (string.IsNullOrWhiteSpace(arg.DefaultValue))
            {
                parameterSyntax = parameterSyntax.WithDefault(EqualsValueClause(LiteralExpression(SyntaxKind.NullLiteralExpression)));
            }
            else if (arg.DefaultValue == EmptyString)
            {
                parameterSyntax = parameterSyntax.WithDefault(EqualsValueClause(LiteralExpression(SyntaxKind.StringLiteralExpression, Literal(string.Empty))));
            }
        }
            
        return parameterSyntax;
    }
    
    ParameterListSyntax CreateInputValuesAsParameterListSyntax(InputValue[]? args)
    {
        if (args == null || args.Length == 0)
        {
            return ParameterList();
        }
        
        return ParameterList()
            .AddParameters(args.RequiredArgs().Select(CreateRequiredArgumentAsParameterSyntax).ToArray())
            .AddParameters(args.NullableArgs().Select(CreateNullableArgumentAsParameterSyntax).ToArray());
    }

    BlockSyntax? CreateBlockSyntax(GraphQL.Field field)
    {
        var argumentsStatement = LocalDeclarationStatement(
            VariableDeclaration(IdentifierName(Identifier(TriviaList(), SyntaxKind.VarKeyword, "var", "var", TriviaList())))
                .WithVariables(SingletonSeparatedList(VariableDeclarator(Identifier("arguments")).WithInitializer(EqualsValueClause(InvocationExpression(MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression, IdentifierName("ArgumentsBuilder"), IdentifierName("GetArguments"))).WithArgumentList(ArgumentList(GetArgumentList(field.Args)))))))
        );
        
        var queryBuilderStatement = LocalDeclarationStatement(
            VariableDeclaration(IdentifierName(Identifier(TriviaList(), SyntaxKind.VarKeyword, "var", "var", TriviaList())))
                .WithVariables(SingletonSeparatedList(VariableDeclarator(Identifier("queryBuilder")).
                        WithInitializer(EqualsValueClause(InvocationExpression(MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression, IdentifierName("QueryBuilder"), IdentifierName("Select")))
                                    .AddArgumentListArguments(Argument(IdentifierName($"\"{field.Name}\"")), Argument(IdentifierName("arguments")))
                            )
                        )
                    )
                )
        );

        var returnStatementSyntax = ReturnStatement();


        if (field.Type.IsLeaf() || field.Type.IsList())
        {
            returnStatementSyntax = ReturnStatement(
                InvocationExpression(AwaitExpression(
                    MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression, IdentifierName("Executor"), GenericName(Identifier("Execute"))
                        .WithTypeArgumentList(TypeArgumentList(SingletonSeparatedList<TypeSyntax>(IdentifierName(field.Type.GetTypeName()))))
                    ))
                ).AddArgumentListArguments(Argument(IdentifierName("GraphQLClient")), Argument(IdentifierName("queryBuilder")))
            );
        }
        else
        {
            returnStatementSyntax = ReturnStatement(ObjectCreationExpression(ParseTypeName(field.Type.GetTypeName())).AddArgumentListArguments(Argument(IdentifierName("queryBuilder")), Argument(IdentifierName("GraphQLClient"))));    
        }

        return Block(
            argumentsStatement,
            queryBuilderStatement,
            returnStatementSyntax
        );
    }

    SeparatedSyntaxList<ArgumentSyntax> GetArgumentList(InputValue[] fieldArgs) => SeparatedList(fieldArgs.Select(CreateArgumentSyntax).ToArray());

    ArgumentSyntax CreateArgumentSyntax(InputValue arg) => Argument(IdentifierName(arg.GetAsParameterName()));
}