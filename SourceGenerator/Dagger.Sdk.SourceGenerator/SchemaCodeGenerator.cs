using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Linq;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Threading.Tasks;
using Dagger.GraphQL;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;

namespace Dagger.Sdk.SourceGenerator;

[Generator]
public class SchemaCodeGenerator : IIncrementalGenerator
{
    readonly string[] _splitChars = ["\r\n", "\r", "\n"];
    const string EmptyArray = "[]";
    const string EmptyString = "\"\"";

    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var additionalFiles = context.AdditionalTextsProvider;
        var compilation = context.CompilationProvider;
        var combined = compilation.Combine(additionalFiles.Collect());
        context.RegisterSourceOutput(combined, (spc, combinedValues) => GenerateCode(spc, combinedValues.Left, combinedValues.Right));
    }

    Compilation _compilation;

    void GenerateCode(SourceProductionContext context, Compilation compilation, ImmutableArray<AdditionalText> files)
    {
        this._compilation = compilation;
        // We only handle schema.json
        if (files.IsDefaultOrEmpty || files.Length != 1) return;
        if (Path.GetFileName(files[0].Path) != "schema.json") return;
        
        SourceText? schemaAsJson = files[0].GetText();
        SchemaFile schemaFile = JsonSerializer.Deserialize<SchemaFile>(schemaAsJson!.ToString())!;
        
        var compilationUnitSyntax = CompilationUnit()
            .WithMembers(CreateDaggerTypes(schemaFile))
            .AddUsings(UsingDirective(IdentifierName(typeof(JsonConverter).Namespace!)), UsingDirective(IdentifierName(nameof(Dagger))))
            .WithLeadingTrivia(CreateLeadingTrivia());
        
        context.AddSource($"Dagger.g.cs", compilationUnitSyntax.NormalizeWhitespace().ToFullString());
    }

    SyntaxTriviaList CreateLeadingTrivia()
    {
        return TriviaList(
            Comment("// This file is generated by DaggerSDK.SourceGenerator"),
            Trivia(NullableDirectiveTrivia(Token(SyntaxKind.EnableKeyword), isActive: true))
        );
    }

    SyntaxList<MemberDeclarationSyntax> CreateDaggerTypes(SchemaFile schemaFile)
    {
        MemberDeclarationSyntax[] memberDeclarationSyntaxes = schemaFile
            !.Schema.Types
            .ExcludeInternalTypes()
            .Select(CreateMemberDeclarationSyntax)
            .Where(syntax => syntax is not null)
            .OfType<MemberDeclarationSyntax>()
            .ToArray();
        
        return List(memberDeclarationSyntaxes);
    }

    MemberDeclarationSyntax? CreateMemberDeclarationSyntax(Dagger.GraphQL.Type type)
    {
        var syntax = type.Kind switch
        {
            Kind.OBJECT => CreateObjectAsClassDeclarationSyntax(type),
            Kind.SCALAR => CreateScalarAsClassDeclarationSyntax(type),
            Kind.INPUT_OBJECT => CreateInputAsStructDeclarationSyntax(type),
            Kind.ENUM => CreateEnumAsEnumDeclarationSyntax(type),
            _ => null,
        };
        
        return syntax;
    }
    
    AttributeSyntax CreateObsoleteAttribute(string? deprecationReason)
    {
        AttributeSyntax obsoleteAttribute = Attribute(IdentifierName(nameof(ObsoleteAttribute)));

        if (!string.IsNullOrWhiteSpace(deprecationReason))
        {
            AttributeArgumentSyntax reason = AttributeArgument(LiteralExpression(SyntaxKind.StringLiteralExpression, Literal(deprecationReason)));
            obsoleteAttribute = obsoleteAttribute.WithArgumentList(AttributeArgumentList(SingletonSeparatedList(reason)));
        }

        return obsoleteAttribute;
    }

    EnumMemberDeclarationSyntax CreateEnumMemberDeclarationSyntax(EnumValue field)
    {
        EnumMemberDeclarationSyntax enumMemberDeclarationSyntax = EnumMemberDeclaration(Identifier(field.Name));
        
        if (field.IsDeprecated)
        {
            enumMemberDeclarationSyntax = enumMemberDeclarationSyntax
                .WithAttributeLists(SingletonList(AttributeList(SingletonSeparatedList(CreateObsoleteAttribute(field.DeprecationReason)))));
        }

        return enumMemberDeclarationSyntax.WithLeadingTrivia(CreateEnumMemberDocumentation(field));
    }

    MemberDeclarationSyntax CreateEnumAsEnumDeclarationSyntax(Dagger.GraphQL.Type type)
    {
        return EnumDeclaration(type.Name)
            .AddModifiers(Token(SyntaxKind.PublicKeyword))
            .WithMembers(SeparatedList(type.EnumValues.Select(CreateEnumMemberDeclarationSyntax)))
            .WithAttributeLists(SingletonList(AttributeList(SingletonSeparatedList(CreateJsonStringEnumConverterAttribute(type)))))
            .WithLeadingTrivia(CreateTypeDocumentation(type));
    }
    
    AttributeSyntax CreateJsonStringEnumConverterAttribute(Dagger.GraphQL.Type type)
    {
        return Attribute(IdentifierName(nameof(JsonConverter)))
            .WithArgumentList(
                AttributeArgumentList(
                    SingletonSeparatedList(AttributeArgument(TypeOfExpression(GenericName(Identifier(nameof(JsonStringEnumConverter)))
                                .WithTypeArgumentList(TypeArgumentList(SingletonSeparatedList(ParseTypeName(type.Name))))
                            )
                        )
                    )
                )
            );
    }
    
    AttributeSyntax CreateScalarIdConverterAttribute(Dagger.GraphQL.Type  type)
    {
        return Attribute(IdentifierName(nameof(JsonConverter)))
            .WithArgumentList(
                AttributeArgumentList(
                    SingletonSeparatedList(AttributeArgument(TypeOfExpression(GenericName(Identifier("Dagger.ScalarIdConverter"))
                                .WithTypeArgumentList(TypeArgumentList(SingletonSeparatedList(ParseTypeName(type.Name))))
                            )
                        )
                    )
                )
            );
    }

    MemberDeclarationSyntax CreateInputAsStructDeclarationSyntax(Dagger.GraphQL.Type  type)
    {
        var ctorArgs = ParameterList(SeparatedList<ParameterSyntax>([
                    Parameter(Identifier("name")).WithType(PredefinedType(Token(SyntaxKind.StringKeyword))),
                    Token(SyntaxKind.CommaToken),
                    Parameter(Identifier("value")).WithType(PredefinedType(Token(SyntaxKind.StringKeyword)))
                ]
            )
        );

        SimpleBaseTypeSyntax inputInterface = SimpleBaseType(IdentifierName(nameof(IInputObject)));

        return StructDeclaration(type.Name)
            .WithModifiers(TokenList(Token(SyntaxKind.PublicKeyword)))
            .WithParameterList(ctorArgs)
            .WithBaseList(BaseList(SingletonSeparatedList<BaseTypeSyntax>(inputInterface)))
            .AddMembers(CreateInputToKeyValuePairMethod());
    }

    MethodDeclarationSyntax CreateInputToKeyValuePairMethod()
    {
        return MethodDeclaration(
                GenericName(Identifier("List"))
                    .WithTypeArgumentList(TypeArgumentList(SingletonSeparatedList<TypeSyntax>(GenericName(Identifier("KeyValuePair"))
                                .WithTypeArgumentList(TypeArgumentList(
                                        SeparatedList<TypeSyntax>([PredefinedType(Token(SyntaxKind.StringKeyword)), Token(SyntaxKind.CommaToken), IdentifierName("Value")])
                                    )
                                )
                            )
                        )
                    ),
                Identifier("ToKeyValuePairs")
            )
            .WithModifiers(TokenList(Token(SyntaxKind.PublicKeyword))).WithBody(
                Block(
                    LocalDeclarationStatement(
                        VariableDeclaration(
                                GenericName(Identifier("List")).WithTypeArgumentList(
                                    TypeArgumentList(SingletonSeparatedList<TypeSyntax>(GenericName(Identifier("KeyValuePair"))
                                            .WithTypeArgumentList(TypeArgumentList(SeparatedList<TypeSyntax>(new SyntaxNodeOrToken[]
                                                        {
                                                            PredefinedType(Token(SyntaxKind.StringKeyword)),
                                                            Token(SyntaxKind.CommaToken),
                                                            IdentifierName("Value")
                                                        }
                                                    )
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                            .WithVariables(
                                SingletonSeparatedList(VariableDeclarator(Identifier("kvPairs")).WithInitializer(EqualsValueClause(
                                            ObjectCreationExpression(GenericName(Identifier("List")).WithTypeArgumentList(TypeArgumentList(
                                                            SingletonSeparatedList<TypeSyntax>(
                                                                GenericName(Identifier("KeyValuePair")).WithTypeArgumentList(TypeArgumentList(SeparatedList<TypeSyntax>(
                                                                            new SyntaxNodeOrToken[]
                                                                            {
                                                                                PredefinedType(Token(SyntaxKind.StringKeyword)),
                                                                                Token(SyntaxKind.CommaToken),
                                                                                IdentifierName("Value")
                                                                            }
                                                                        )
                                                                    )
                                                                )
                                                            )
                                                        )
                                                    )
                                                )
                                                .WithArgumentList(ArgumentList())
                                        )
                                    )
                                )
                            )
                    ),
                    ExpressionStatement(InvocationExpression(MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression, IdentifierName("kvPairs"), IdentifierName("Add")))
                        .WithArgumentList(ArgumentList(SingletonSeparatedList(Argument(ObjectCreationExpression(
                                            GenericName(Identifier("KeyValuePair")).WithTypeArgumentList(TypeArgumentList(
                                                    SeparatedList<TypeSyntax>(new SyntaxNodeOrToken[]
                                                        {
                                                            PredefinedType(Token(SyntaxKind.StringKeyword)),
                                                            Token(SyntaxKind.CommaToken),
                                                            IdentifierName("Value")
                                                        }
                                                    )
                                                )
                                            )
                                        )
                                        .WithArgumentList(ArgumentList(SeparatedList<ArgumentSyntax>(new SyntaxNodeOrToken[]
                                                    {
                                                        Argument(LiteralExpression(SyntaxKind.StringLiteralExpression, Literal("name"))),
                                                        Token(SyntaxKind.CommaToken),
                                                        Argument(
                                                            CastExpression(
                                                                IdentifierName(nameof(Dagger.Value)),
                                                                ObjectCreationExpression(IdentifierName(nameof(Dagger.StringValue)))
                                                                    .WithArgumentList(ArgumentList(SingletonSeparatedList(Argument(IdentifierName("name")))))
                                                            )
                                                        )
                                                    }
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                        )
                    ),
                    ExpressionStatement(
                        InvocationExpression(
                                MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression, IdentifierName("kvPairs"), IdentifierName("Add"))
                            )
                            .WithArgumentList(
                                ArgumentList(
                                    SingletonSeparatedList(
                                        Argument(
                                            ObjectCreationExpression(
                                                    GenericName(Identifier("KeyValuePair")).WithTypeArgumentList(
                                                        TypeArgumentList(
                                                            SeparatedList<TypeSyntax>(new SyntaxNodeOrToken[]
                                                                {
                                                                    PredefinedType(Token(SyntaxKind.StringKeyword)),
                                                                    Token(SyntaxKind.CommaToken),
                                                                    IdentifierName(nameof(Dagger.Value))
                                                                }
                                                            )
                                                        )
                                                    )
                                                )
                                                .WithArgumentList(
                                                    ArgumentList(
                                                        SeparatedList<ArgumentSyntax>(
                                                            new SyntaxNodeOrToken[]
                                                            {
                                                                Argument(LiteralExpression(SyntaxKind.StringLiteralExpression, Literal("value"))),
                                                                Token(SyntaxKind.CommaToken),
                                                                Argument(
                                                                    CastExpression(
                                                                        IdentifierName(nameof(Dagger.Value)),
                                                                        ObjectCreationExpression(IdentifierName(nameof(Dagger.StringValue)))
                                                                            .WithArgumentList(
                                                                                ArgumentList(SingletonSeparatedList(Argument(IdentifierName("value"))))
                                                                            )
                                                                    )
                                                                )
                                                            }
                                                        )
                                                    )
                                                )
                                        )
                                    )
                                )
                            )
                    ),
                    ReturnStatement(IdentifierName("kvPairs"))
                )
            );
    }

    MemberDeclarationSyntax CreateObjectAsClassDeclarationSyntax(Dagger.GraphQL.Type  type)
    {
        GraphQL.Field? interfaceType = type.Fields.FirstOrDefault(f => f.Name == "id");
        
        BaseListSyntax baseListSyntax = BaseList().AddTypes(PrimaryConstructorBaseType(IdentifierName("Dagger.Object"),
                ArgumentList(SeparatedList<ArgumentSyntax>([Argument(IdentifierName(nameof(QueryBuilder))), Token(SyntaxKind.CommaToken), Argument(IdentifierName(nameof(GraphQLClient)))]))
            )
        );;

        if (interfaceType is not null)
        {
            baseListSyntax = baseListSyntax
                .AddTypes(SimpleBaseType(GenericName(Identifier("IId"))
                        .WithTypeArgumentList(TypeArgumentList(SingletonSeparatedList(ParseTypeName(interfaceType.Type.GetTypeName()))))
                    )
                );
        }

        return ClassDeclaration(type.Name)
            .AddModifiers(Token(SyntaxKind.PublicKeyword))
            .WithMembers(List(type.Fields.Select(field => CreateFieldAsMemberDeclarationSyntax(type, field))))
            .WithParameterList(ParameterList(SeparatedList<ParameterSyntax>([
                            Parameter(Identifier("QueryBuilder")).WithType(IdentifierName("QueryBuilder")),
                            Token(SyntaxKind.CommaToken),
                            Parameter(Identifier("GraphQLClient")).WithType(IdentifierName("GraphQLClient"))
                        ]
                    )
                )
            )
            .WithBaseList(baseListSyntax)
            .WithLeadingTrivia(CreateTypeDocumentation(type));
    }

    MemberDeclarationSyntax CreateFieldAsMemberDeclarationSyntax(Dagger.GraphQL.Type  type, GraphQL.Field field)
    {
        var modifiers = TokenList(Token(SyntaxKind.PublicKeyword));
        var returnType = CreateReturnType(field);

        if (returnType is GenericNameSyntax { Identifier.Text: nameof(Task) })
        {
            modifiers = modifiers.Add(Token(SyntaxKind.AsyncKeyword));
        }

        var method = MethodDeclaration(returnType, type.GetMethodName(field))
            .WithModifiers(modifiers)
            .WithBody(CreateBlockSyntax(field))
            .WithParameterList(CreateInputValuesAsParameterListSyntax(field.Args))
            .WithLeadingTrivia(CreateFieldDocumentationAsTriviaComments(field));

        if (field.IsDeprecated)
        {
            var attributeSyntax = Attribute(IdentifierName(nameof(ObsoleteAttribute)));

            if (field.DeprecationReason is not null)
            {
                attributeSyntax = attributeSyntax.WithArgumentList(
                    AttributeArgumentList(
                        SingletonSeparatedList(
                            AttributeArgument(LiteralExpression(SyntaxKind.StringLiteralExpression, Literal(field.DeprecationReason)))
                        )
                    )
                );
            }

            method = method.WithAttributeLists(SingletonList(AttributeList(SingletonSeparatedList(attributeSyntax))));
        }

        return method;
    }

    TypeSyntax CreateReturnType(GraphQL.Field f)
    {
        if (f.Type.IsLeaf() || f.Type.IsList())
        {
            return GenericName(Identifier(nameof(Task))).WithTypeArgumentList(TypeArgumentList(SingletonSeparatedList(ParseTypeName(f.Type.GetTypeName()))));
        }

        return ParseTypeName(f.Type.GetTypeName());
    }

    MemberDeclarationSyntax CreateScalarAsClassDeclarationSyntax(Dagger.GraphQL.Type type)
    {
        return ClassDeclaration(type.Name)
            .AddModifiers(Token(SyntaxKind.PublicKeyword))
            .WithBaseList(BaseList().AddTypes(SimpleBaseType(IdentifierName("Dagger.Scalar"))))    
            .WithAttributeLists(SingletonList(AttributeList(SingletonSeparatedList(CreateScalarIdConverterAttribute(type)))))
            .WithLeadingTrivia(CreateTypeDocumentation(type));
    }
    
    SyntaxTriviaList CreateTypeDocumentation(Dagger.GraphQL.Type  type)
    {
        return CreateSummaryDocumentation(type.Description);
    }

    SyntaxTriviaList CreateSummaryDocumentation(string description)
    {
        var lines = description.Split(_splitChars, StringSplitOptions.RemoveEmptyEntries);
        var comments = new List<SyntaxTrivia>
        {
            Comment("/// <summary>"),
        };

        foreach (var line in lines)
        {
            comments.Add(Comment($"/// {line.Trim()}"));
        }

        comments.Add(Comment("/// </summary>"));

        return TriviaList(comments);
    }

    SyntaxTriviaList CreateEnumMemberDocumentation(EnumValue field)
    {
        return CreateSummaryDocumentation(field.Description);
    }

    SyntaxTriviaList CreateFieldDocumentationAsTriviaComments(GraphQL.Field field)
    {
        var lines = field.Description.Split(_splitChars, StringSplitOptions.RemoveEmptyEntries);
        var comments = new List<SyntaxTrivia>();
        comments.Add(Comment("/// <summary>"));

        foreach (var line in lines)
        {
            comments.Add(Comment($"/// {line.Trim()}"));
        }

        comments.Add(Comment("/// </summary>"));

        foreach (var arg in field.Args)
        {
            var name = arg.Name;
            var argLines = arg.Description.Split(_splitChars, StringSplitOptions.RemoveEmptyEntries);
            comments.Add(Comment($"/// <param name=\"{name}\">"));

            foreach (var line in argLines)
            {
                comments.Add(Comment($"/// {line.Trim()}"));
            }

            comments.Add(Comment("/// </param>"));
        }

        return TriviaList(comments);
    }
    
    ParameterSyntax CreateRequiredArgumentAsParameterSyntax(InputValue arg)
    {
        ParameterSyntax parameterSyntax = Parameter(Identifier(arg.GetArgumentName()));

        if (arg.Type.GetType_().IsList())
        {
            parameterSyntax = parameterSyntax
                .WithType(ArrayType(IdentifierName(arg.Type.GetTypeName())).WithRankSpecifiers(SingletonList(ArrayRankSpecifier(SingletonSeparatedList<ExpressionSyntax>(OmittedArraySizeExpression())))));
            
        }
        else
        {
            if (arg.DefaultValue != null)
            {
                parameterSyntax = parameterSyntax
                    .WithType(ParseTypeName(arg.Type.GetTypeName()))
                    .WithDefault(EqualsValueClause(LiteralExpression(SyntaxKind.StringLiteralExpression, Literal(arg.DefaultValue))));
            }
            else
            {
                parameterSyntax = parameterSyntax.WithType(ParseTypeName(arg.Type.GetTypeName()));
            }
        }
        
        return parameterSyntax;
    }

    ParameterSyntax CreateOptionalArgumentAsParameterSyntax(InputValue arg)
    {
        ParameterSyntax parameterSyntax = Parameter(Identifier(arg.Name)).WithType(NullableType(ParseTypeName(arg.Type.GetTypeName())));

        if (arg.Type.IsList())
        {
            if (arg.DefaultValue == EmptyArray)
            {
                parameterSyntax = parameterSyntax.WithDefault(EqualsValueClause(LiteralExpression(SyntaxKind.NullLiteralExpression)));
            }
            else if (arg.DefaultValue is null)
            {
                parameterSyntax = parameterSyntax.WithDefault(EqualsValueClause(LiteralExpression(SyntaxKind.NullLiteralExpression)));
            }
            else
            {
                throw new NotImplementedException("List with default value not implemented");
            }
        }
        else if (arg.Type.IsBoolean())
        {
            if (arg.DefaultValue == "true")
            {
                parameterSyntax = parameterSyntax.WithDefault(EqualsValueClause(LiteralExpression(SyntaxKind.TrueLiteralExpression)));
            }
            else if (arg.DefaultValue == "false")
            {
                parameterSyntax = parameterSyntax.WithDefault(EqualsValueClause(LiteralExpression(SyntaxKind.FalseLiteralExpression)));
            }
            else if (arg.DefaultValue is null)
            {
                parameterSyntax = parameterSyntax.WithDefault(EqualsValueClause(LiteralExpression(SyntaxKind.NullLiteralExpression)));
            }
            else
            {
                throw new NotImplementedException("Boolean with default value not implemented");
            }
        }
        else if (arg.Type.IsInt())
        {
            if (arg.DefaultValue is null)
            {
                parameterSyntax = parameterSyntax.WithDefault(EqualsValueClause(LiteralExpression(SyntaxKind.NullLiteralExpression)));
            }
            else
            {
                parameterSyntax = parameterSyntax
                    .WithDefault(EqualsValueClause(LiteralExpression(SyntaxKind.NumericLiteralExpression, Literal(arg.DefaultValue, int.Parse(arg.GetDefaultValue())))));
            }
        }
        else if (arg.Type.IsFloat())
        {
            if (arg.DefaultValue is null)
            {
                parameterSyntax = parameterSyntax
                    .WithDefault(EqualsValueClause(LiteralExpression(SyntaxKind.NullLiteralExpression)));
            }
            else if (!string.IsNullOrWhiteSpace(arg.DefaultValue))
            {
                parameterSyntax = parameterSyntax
                    .WithDefault(EqualsValueClause(LiteralExpression(SyntaxKind.NumericLiteralExpression, Literal(arg.DefaultValue, float.Parse(arg.GetDefaultValue())))));
            }
        }
        else if (arg.Type.IsString())
        {
            if (arg.DefaultValue is null)
            {
                parameterSyntax = parameterSyntax
                    .WithDefault(EqualsValueClause(LiteralExpression(SyntaxKind.NullLiteralExpression)));
            }
            else if (arg.DefaultValue == EmptyString)
            {
                parameterSyntax = parameterSyntax
                    .WithDefault(EqualsValueClause(LiteralExpression(SyntaxKind.StringLiteralExpression, Literal(string.Empty))));
            }
            else if (!string.IsNullOrWhiteSpace(arg.DefaultValue))
            {
                parameterSyntax = parameterSyntax
                    .WithDefault(EqualsValueClause(LiteralExpression(SyntaxKind.StringLiteralExpression, Literal(arg.GetDefaultValue()))));
            }
            else
            {
                throw new NotImplementedException("String with default value not implemented");
            }
        }
        else if (arg.Type.IsEnum())
        {
            if (arg.DefaultValue == null)
            {
                parameterSyntax = parameterSyntax.WithDefault(EqualsValueClause(LiteralExpression(SyntaxKind.NullLiteralExpression)));
            }
            else if (arg.DefaultValue == EmptyString)
            {
                parameterSyntax = parameterSyntax.WithDefault(EqualsValueClause(LiteralExpression(SyntaxKind.NullLiteralExpression)));
            }
            else if (arg.DefaultValue is not null)
            {
                parameterSyntax = parameterSyntax.WithDefault(EqualsValueClause(MemberAccessExpression(
                            SyntaxKind.SimpleMemberAccessExpression,
                            IdentifierName(arg.Type.Name),
                            IdentifierName(arg.GetDefaultValue())
                        )
                    )
                );
            }
            else
            {
                throw new NotImplementedException("Enum with default value not implemented");
            }
        }
        else if (arg.Type.IsScalar())
        {
            if (arg.DefaultValue == null)
            {
                parameterSyntax = parameterSyntax.WithDefault(EqualsValueClause(LiteralExpression(SyntaxKind.NullLiteralExpression)));
            }
            else if (arg.DefaultValue == EmptyString)
            {
                parameterSyntax = parameterSyntax.WithDefault(EqualsValueClause(LiteralExpression(SyntaxKind.StringLiteralExpression, Literal(string.Empty))));
            }
        }
            
        return parameterSyntax;
    }
    
    ParameterListSyntax CreateInputValuesAsParameterListSyntax(InputValue[]? args)
    {
        ParameterListSyntax parameterListSyntax = ParameterList();

        if (args == null || args.Length == 0)
        {
            return parameterListSyntax;
        }

        return parameterListSyntax
            .AddParameters(args.RequiredArgs().Select(CreateRequiredArgumentAsParameterSyntax).ToArray())
            .AddParameters(args.OptionalArgs().Select(CreateOptionalArgumentAsParameterSyntax).ToArray());
    }

    BlockSyntax? CreateBlockSyntax(GraphQL.Field field)
    {
        return Block(ThrowStatement(
                ObjectCreationExpression(
                    IdentifierName("NotImplementedException")
                ).WithArgumentList(
                    ArgumentList(
                        SingletonSeparatedList(
                            Argument(
                                LiteralExpression(
                                    SyntaxKind.StringLiteralExpression,
                                    Literal("Not implemented yet")
                                )
                            )
                        )
                    )
                )
            )
        );
    }

    StatementSyntax CreateReturnStatement(GraphQL.Field field)
    {
        return ReturnStatement();
    }

    StatementSyntax CreateQueryStatement(GraphQL.Field field)
    {
        return EmptyStatement();
    }

    StatementSyntax CreateArgumentStatement(GraphQL.Field field)
    {
        if (field.Args.Length == 0)
        {
            return EmptyStatement();
        }

        return EmptyStatement();
    }
}